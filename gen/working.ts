/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * AllOf
 * OpenAPI spec version: 1.0.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import useSwr, { SWRConfiguration, Key } from "swr";
import type { Working } from "./models";
import { rest } from "msw";
import { faker } from "@faker-js/faker";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary An endpoint that uses a working demo of allOf
 */
export const workingEndpoint = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Working>> => {
  return axios.get(`/workingendpoint`, options);
};

export const getWorkingEndpointKey = () => [`/workingendpoint`];

export type WorkingEndpointQueryResult = NonNullable<
  Awaited<ReturnType<typeof workingEndpoint>>
>;
export type WorkingEndpointQueryError = AxiosError<unknown>;

export const useWorkingEndpoint = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof workingEndpoint>>,
    TError
  > & { swrKey: Key };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getWorkingEndpointKey());
  const swrFn = () => workingEndpoint(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const getWorkingEndpointMock = () => ({
  commonPropsField1: faker.random.arrayElement([
    faker.random.word(),
    undefined,
  ]),
  commonPropsField2: faker.random.arrayElement([
    faker.random.word(),
    undefined,
  ]),
  workingField: faker.random.arrayElement([faker.random.word(), undefined]),
});

export const getWorkingMSW = () => [
  rest.get("*/workingendpoint", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getWorkingEndpointMock())
    );
  }),
];
