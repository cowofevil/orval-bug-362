/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * AllOf
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr,{
  SWRConfiguration,
  Key
} from 'swr'
import type {
  Broken
} from './models'
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'



  type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


  /**
 * @summary An endpoint that uses a broken demo of allOf
 */
export const brokenEndpoint = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Broken>> => {
    return axios.get(
      `/brokenendpoint`,options
    );
  }


export const getBrokenEndpointKey = () => [`/brokenendpoint`];

    
export type BrokenEndpointQueryResult = NonNullable<Awaited<ReturnType<typeof brokenEndpoint>>>
export type BrokenEndpointQueryError = AxiosError<unknown>

export const useBrokenEndpoint = <TError = AxiosError<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof brokenEndpoint>>, TError> & {swrKey: Key}, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? (() => getBrokenEndpointKey())
  const swrFn = () => brokenEndpoint(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}



export const getBrokenEndpointMock = () => ({commonPropsField1: faker.random.arrayElement([faker.random.word(), undefined]), commonPropsField2: faker.random.arrayElement([faker.random.word(), undefined]),{}})

export const getBrokenMSW = () => [
rest.get('*/brokenendpoint', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getBrokenEndpointMock()),
        )
      }),]
